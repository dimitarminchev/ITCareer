# Storage Master

## Преглед на задачата
В този изпит трябва да построите проект за управление на складове, който има поддръжка за продукти, хранилище за съхранение на продукти и превозни средства за транспортиране на продукти от едно складово помещение до друго. Проектът се състои от модели и контролер клас, който управлява взаимодействието между складовите помещения (storage), превозните средства (vehicles) и продуктите (products).

## Настройка
Създайте нов проект с името "StorageMaster". Проектът трябва да има клас с името StartUp в namespace "StorageMaster".

# Задача 1: Структура (36 точки)
Product
Продуктът е базов клас за всички продукти и не трябва да може да бъде инстанцииран.

## Полета
- **Price** = реално число (double)
- Ако се въведе отрицателна цена, хвърлете InvalidOperationException със съобщението "Price cannot be negative!".
- **Weight** = реално число (double)

## Конструктор
Продуктът трябва да приема следните стойности при инициализирането:
```
double price, double weight
```

## Класове наследници
Има няколко конкретни вида продукти:

- **Gpu** = винаги има 0.7 тежест
- **HardDrive** = винаги има 1 тежест
- **Ram** = винаги има 0.1 тежест
- **SolidStateDrive** – винаги има 0.2 тежест

Всеки тип продукт получава само своята цена при инициализация.

## Vehicle
Превозното средство е базов клас за всички превозни средства и не трябва да може да бъде инстанцран.

### Полета
- **Capacity** = цяло число
- **Trunk** = IReadOnlyCollection от продукти
- **IsFull** = булев. Връща истина ако сумата от теглото на продуктите е равна или по-голяма от капацитета на превозното средство
- **IsEmpty** = булев. Връща истина ако превозното средство няма продукти в багажника

### Конструктор
Превозното средство трябва да примеа следните стойности при инициализация:
```
int capacity
```

### Поведение
```
void LoadProduct(Product product)
```
- Ако автомобилът вече е пълен, хвърлете InvalidOperationException със съобщението "Vehicle is full!".
- Ако тази проверка преминава, продуктът се добавя към багажника на автомобила.

```
Product Unload()
```
- Ако багажникът на автомобила е празен, хвърлете InvalidOperationException със съобщението "No products left in vehicle!".
- Ако тази проверка мине, последният продукт в багажника се отстранява от багажника на автомобила и се връща на повикващия.

## Класове наследници
Има няколко конкретни вида превозни средства:

- **Van** = винаги има капацитет равен на 2
- **Truck** = винаги има капацитет равен на 5
- **Semi** = винаги има капацитет равен на 10

Конкретните класове на превозните средства не приемат никакви параметри при инициализация.

## Storage
The Storage is a base class for any storage and it should not be able to be instantiated.

The storage is a building, which holds products. It also has a garage of vehicles with a fixed length. The length is determined by the garage slots of the storage.

### Полета
- **Name** = низ
- **Capacity** = цяло число – максималното тегло на продуктите, с които може да работи устройството за съхранение
- **GarageSlots** = цяло число – броя гаражни слотове, които гаражът има
- **IsFull** = булев. Връща истина, ако сумата от теглата на продуктите е равна или по-голяма от капацитета за съхранение
- **Garage** = IReadOnlyCollection of vehicles. Read-only репрезентация на масив от гаражи.
- **Products** = IReadOnlyCollection от продукти. Read-only репрезентация на продуктите в склада.

### Конструктор
Склада трябва да приема следните стойности при инициализирането:
```
string name, int capacity, int garageSlots, IEnumerable<Vehicle> vehicles
```

### Поведение
```
Vehicle GetVehicle(int garageSlot)
```
- Ако предоставеният номер на гаражното място е равен или по-голям от броя на гаражните слотове, хвърлете InvalidOperationException със съобщението "Invalid garage slot!".
- Ако гаражът е празен, хвърлете InvalidOperationException със съобщението "No vehicle in this garage slot!"

Методът връща извлеченото превозно средство.
```
int SendVehicleTo(int garageSlot, Storage deliveryLocation)
```
- Вземе превозното средство от определения слот гараж (използвайте валидацията на метода GetVehicle).
- След това методът проверява дали има свободни гаражни слотове. Свободният слот е означен с нулева (null) стойност.
- Ако няма свободно място за гараж, хвърлете InvalidOperationException със съобщението "No room in garage!".
- След това гаражът в хранилището на източника се освобождава и автомобилът се добавя към първия свободен гаражен слот.
- Методът връща гаражния слот, в който е добавен автомобилът, когато е прехвърлен.

```
int UnloadVehicle(int garageSlot)
```
- Ако хранилището е пълно, хвърлете InvalidOperationException със съобщението "Storage is full!".
- Вземете превозното средство от определения гаражен слот (използвайте вадидацията на GetVehicle метода).
- След това, докато превозното средство се изпразни или се запълни, продуктите на превозното средство се разопаковат и се добавят към продуктите на хранилището.
- Методът връща броя на разтоварените продукти.

## Класове наследници
Има няколко конкретни вида хранилища и всяка от тях има по подразбиране набор от превозни средства:

- **AutomatedWarehouse** = има капацитет равен на 1 и 2 гаражни слота. Превоздни средства по подразбиране: 1 Truck
- **DistributionCenter** = има капацитет равен на 2 и 5 гаражни слота. Превоздни средства по подразбиране: 3 Vans
- **Warehouse** = има капацитет равен на 10 and 10 гаражни слота. Превоздни средства по подразбиране: 3 Semi trucks

Всеки тип хранилище получава име при инициализирането.

# Task 2: Business Logic (42 точки)

## Контролер клас
Бизнес логиката на програмата трябва да бъде концентрирана около няколко команди. Създайте клас, наречен StorageMaster, който ще задържа основната функционалност.

Master Storage следи регистъра за съхранение и групата продукти (продуктите в основното хранилище). Той също така следи текущото превозно средство (обяснено по-долу).

Забележка: Класът StorageMaster НЕ трябва да се справя с изключенията! Тестовете са предназначени да очакват изключения, а не съобщения!

Основната функционалност трябва да бъде постигната чрез тези публични методи: